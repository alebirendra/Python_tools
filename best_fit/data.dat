 x           y
36.0     17261.000000
38.0     11525.142857
40.0      4901.000000
42.0      6014.272727
44.0      5728.888889
46.0      2765.047619
48.0      3740.040000
50.0      2071.275862
52.0      2546.758621
54.0      1206.333333
56.0       649.433333
58.0       634.866667
60.0       563.566667
62.0       450.433333
64.0       411.333333
66.0       381.300000
68.0       293.366667
70.0       315.966667
72.0       272.900000
74.0       282.133333
76.0       248.000000
78.0       243.300000
80.0       220.933333
85.0       211.033333
90.0       210.733333
95.0       184.066667
100.0      188.033333
105.0      178.066667
120.0      169.166667
140.0      157.066667
160.0      134.633333
180.0      130.833333
200.0      119.366667
250.0      117.666667
300.0      111.000000
350.0      106.200000
400.0      101.066667




import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Data
x = np.array([36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 85.0, 90.0, 95.0, 100.0, 105.0, 120.0, 140.0, 160.0, 180.0, 200.0, 250.0, 300.0, 350.0, 400.0])
y = np.array([17261.0, 11525.142857, 4901.0, 6014.272727, 5728.888889, 2765.047619, 3740.04, 2071.275862, 2546.758621, 1206.333333, 649.433333, 634.866667, 563.566667, 450.433333, 411.333333, 381.3, 293.366667, 315.966667, 272.9, 282.133333, 248.0, 243.3, 220.933333, 211.033333, 210.733333, 184.066667, 188.033333, 178.066667, 169.166667, 157.066667, 134.633333, 130.833333, 119.366667, 117.666667, 111.0, 106.2, 101.066667])

# Define the model function
def model_func(x, a, b, c):
    return a * np.exp(-b * x) + c

# Fit the model to the data
params, params_covariance = curve_fit(model_func, x, y, p0=[1, 0.01, 1])

# Print the parameters of the best fit
print(f"Fitted parameters:\na = {params[0]}\nb = {params[1]}\nc = {params[2]}")

# Plot data and the best fit curve
plt.figure(figsize=(10, 6))
plt.scatter(x, y, label='Data')
plt.plot(x, model_func(x, *params), color='red', label='Best fit: $a \cdot e^{-bx} + c$')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()

# Use the model for predictions
def predict(x_new):
    return model_func(x_new, *params)

# Example prediction
x_new = 45
y_pred = predict(x_new)
print(f"Predicted y for x = {x_new}: {y_pred}")

