import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Define the logistic function
def logistic(x, L, x0, k):
    return L / (1 + np.exp(-k * (x - x0)))

# Define the combined model for multiple steps
def combined_logistic(x, *params):
    num_steps = len(params) // 3
    y = np.zeros_like(x)
    for i in range(num_steps):
        L = params[3 * i]
        x0 = params[3 * i + 1]
        k = params[3 * i + 2]
        y += logistic(x, L, x0, k)
    return y

# Sample data
x_data = np.linspace(0, 10, 100)
y_data = np.piecewise(x_data, [x_data < 3, (x_data >= 3) & (x_data < 6), x_data >= 6], [1, 2, 3])
y_data = y_data + np.random.normal(scale=0.1, size=x_data.shape)

# Initial guess for parameters: [L1, x01, k1, L2, x02, k2, ...]
initial_guess = [1, 1.5, 10, 2, 4.5, 10, 3, 7.5, 10]

# Fit the model to the data
params, _ = curve_fit(combined_logistic, x_data, y_data, p0=initial_guess)

# Plot the original data and the fitted curve
plt.scatter(x_data, y_data, label='Data', color='blue')
plt.plot(x_data, combined_logistic(x_data, *params), label='Fitted curve', color='red')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Step Function Fit with Logistic Functions')
plt.show()
